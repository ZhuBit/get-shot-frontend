{"version":3,"sources":["data sync /^/.//appointment.*/.json$","components/AppMenu.js","services/api.js","components/RegisterPatient.js","components/Confirmation.js","components/Vaccination.js","router.js","App.js","reportWebVitals.js","utils/history.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","withRouter","history","location","useLocation","theme","selectedKeys","pathname","mode","className","addPatient","values","a","fetch","process","method","body","JSON","stringify","patient","response","json","console","log","data","getPatients","Form","useForm","form","onFinish","status","push","labelCol","span","wrapperCol","layout","style","padding","Item","label","name","rules","required","message","placeholder","type","picker","format","min","htmlType","Confirmation","useState","index","setIndex","require","doc","setDoc","onClick","i","Vaccination","patients","setPatients","insuranceNumber","setInsuranceNumber","selectedPatient","setSelectedPatient","useEffect","getAllPatients","p","numbers","changeStatus","pat","error","updatePatient","columns","title","dataIndex","key","render","color","width","options","onSelect","item","number","filter","selectPatient","filterOption","inputValue","option","value","toUpperCase","indexOf","DOB","email","dataSource","rowKey","MainRouter","exact","path","Header","Layout","Content","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","config","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b961ce5.chunk.js","sourcesContent":["var map = {\n\t\"./appointment1.json\": 134,\n\t\"./appointment2.json\": 230,\n\t\"./appointment3.json\": 231\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 229;","import React from \"react\";\nimport { Menu, Avatar } from \"antd\";\nimport { withRouter, useLocation } from \"react-router-dom\";\n\n\nimport \"./AppMenu.css\";\n\nconst AppMenu = ({ history }) => {\n    let location = useLocation();\n\n    return (\n        <>\n            <Menu\n                theme=\"dark\"\n                selectedKeys={[location.pathname]}\n                mode=\"horizontal\"\n                className=\"app-menu-style\"\n            >\n            </Menu>\n        </>\n    );\n};\n\nexport default withRouter(AppMenu);\n","\nconst addPatient = async (values) => {\n    try {\n        const response = await fetch(\n            `${process.env.REACT_APP_API_URL}/postPatient`,\n            {\n                method: \"POST\",\n                mode: 'cors',\n                body: JSON.stringify({\n                    patient: values\n                })\n            },\n        );\n        const json = await response.json();\n        console.log('response', json)\n        return json.data;\n    } catch (error) {\n        console.log(error);\n        return [];\n    }\n}\n\nconst getPatients = async () => {\n    try {\n        const data = await fetch(`${process.env.REACT_APP_API_URL}/patients`);\n        const json = await data.json();\n        console.log(json)\n        return json.data;\n    } catch (error) {\n        console.log(error);\n        return [];\n    }\n};\n\nconst updatePatient =  (patient) => {\n    try {\n        const response =  fetch(\n            `${process.env.REACT_APP_API_URL}/editPatient`,\n            {\n                method: \"POST\",\n                body: JSON.stringify({\n                    patient : patient,\n                }),\n            }\n        );\n        const json = response.json();\n        return json.data;\n    } catch (error) {\n        console.log(error);\n        return [];\n    }\n}\nexport {\n    getPatients,\n    addPatient,\n    updatePatient\n}\n","import React from \"react\";\nimport {\n    Form,\n    Input,\n    Button,\n    DatePicker,\n} from 'antd';\nimport { withRouter } from \"react-router-dom\";\nimport {addPatient} from \"../services/api\";\n\n\n const RegisterPatient = ({ history }) => {\n     const [form] = Form.useForm();\n     const onFinish = async(values) => {\n         values.status = 0\n         await addPatient(values)\n         history.push('/confirm')\n     };\n     return (\n         <Form\n             form={form}\n             onFinish={onFinish}\n             labelCol={{ span: 4 }}\n             wrapperCol={{ span: 14 }}\n             layout=\"horizontal\"\n             style={{padding: 40}}\n         >\n             <br/>\n             <Form.Item label=\"Name\"\n                        name=\"name\"\n                        rules={[\n                            { required: true, message: \"Please input your name\" },\n                        ]}>\n                 <Input placeholder={\"Name\"} type=\"text\" />\n             </Form.Item>\n             <Form.Item  name=\"email\"\n                         label=\"E-mail\"\n                         rules={[\n                             {\n                                 type: \"email\",\n                                 message: \"The input is not valid E-mail\",\n                             },\n                             {\n                                 required: true,\n                                 message: \"Please input your E-mail\",\n                             },\n                         ]}>\n                 <Input placeholder={\"E-Mail\"} />\n             </Form.Item>\n             <Form.Item label=\"Phone Number\"\n                        name=\"phoneNumber\"\n                        rules={[\n                            { required: true, message: \"Please input your phone number\" },\n                        ]}>\n                 <Input placeholder={\"Phone Number\"} type=\"text\" />\n             </Form.Item>\n             <Form.Item\n                 name=\"DOB\"\n                 label=\"Date of Birth\"\n                 rules={[{ required: true, message: \"Please input your date of birth\" }]}\n             >\n                 <DatePicker picker=\"month\" format={\"MM-YYYY\"} />\n             </Form.Item>\n             <Form.Item label=\"Insurance Number\"\n                        name=\"insuranceNumber\"\n                        type=\"text\"\n                        rules={[\n                            { required: true, message: \"Please input your insurance number(min 10 characters)\",\n                              min: 10\n                            },\n                        ]}>\n                 <Input placeholder={\"Insurance Number\"} type=\"text\" />\n             </Form.Item>\n             <Button type=\"primary\" htmlType=\"submit\">\n                 Submit\n             </Button>\n         </Form>\n     )\n }\n\n\n\n\nexport default withRouter(RegisterPatient)\n","import React, {useState} from \"react\";\nimport {Button} from 'antd'\nconst Confirmation = () => {\n    const [index, setIndex] = useState(1);\n    const [doc, setDoc] = useState(require('../data/appointment1.json'))\n\n    const changeDate = () => {\n        setDoc(require(`../data/appointment${index + 1}.json`))\n        let i = index\n        i += 1\n        setIndex(i)\n    }\n    return (\n        <>\n            <h3>Thank you!</h3>\n            <p>You successfully registered for your vaccination</p>\n            {doc.message}\n            <br/><br/>\n            {index < 3 &&  <Button onClick={changeDate}> I want another time</Button>}\n        </>\n    )\n}\n\nexport default Confirmation;\n","import React, {useEffect, useState} from \"react\";\nimport {Row, Col, Button, Table, AutoComplete, Tag} from 'antd'\nimport {getPatients, updatePatient} from \"../services/api\";\n\nconst Vaccination = () => {\n    const [patients, setPatients] = useState(null);\n    const [insuranceNumber, setInsuranceNumber] = useState(null);\n    const [selectedPatient, setSelectedPatient] = useState(null);\n    useEffect(\n        () => {\n            if (!patients) getAllPatients()\n        }\n    );\n\n    const getAllPatients = async () => {\n        const p = await getPatients();\n        let numbers = p.map( patient => {\n            return {\n            'value':  patient.insuranceNumber\n            }\n        })\n        setInsuranceNumber(numbers)\n        setPatients(p)\n    }\n\n    const selectPatient = (number) => {\n        let patient = patients.filter(item => item.insuranceNumber === number)[0]\n        setSelectedPatient(patient)\n    }\n\n    const changeStatus = (patient) => {\n        let pat = patient\n        pat.status += 1\n        updatePatient(pat)\n        getAllPatients()\n        setSelectedPatient(pat)\n    }\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: 'Insurance Number',\n            dataIndex: 'insuranceNumber',\n            key: 'insuranceNumber',\n        },\n        {\n            title: 'Email',\n            dataIndex: 'email',\n            key: 'email',\n        },\n        {\n            title: 'Status',\n            dataIndex: 'status',\n            key: 'status',\n            render: status => (\n                <>\n                    {\n                        status === 0 && <Tag>Not admitted</Tag>\n                    }\n                    {\n                        status === 1 && <Tag color=\"magenta\">Waiting</Tag>\n                    }\n                    {\n                        status === 2 && <Tag color=\"cyan\">Getting vaccinated</Tag>\n                    }\n                    {\n                        status > 2 && <Tag color=\"green\">Vaccinated</Tag>\n                    }\n                </>\n            ),\n        },\n    ];\n\n    return (\n        <div>\n            <br/>\n            <br/>\n            {patients &&\n                <>\n                    <AutoComplete\n                        style={{\n                            width: 200,\n                        }}\n                        options={insuranceNumber}\n                        onSelect={item => selectPatient(item)}\n                        key='1'\n                        placeholder=\"Search Insurance Number of Patients`\"\n                        filterOption={(inputValue, option) =>\n                            option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                        }\n                    />\n                    <br/>\n                    {selectedPatient &&\n                        <>\n                            <Row>\n                                <Col span={6}>\n                                    <strong>Name: </strong>\n                                    <p>{selectedPatient.name}</p>\n                                </Col>\n                                <Col span={6}>\n                                    <strong>Insurance Number: </strong>\n                                    <p>{selectedPatient.insuranceNumber}</p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={6}>\n                                    <strong>Date of Birth: </strong>\n                                    <p>{selectedPatient.DOB}</p>\n                                </Col>\n                                <Col span={6}>\n                                    <strong>E-Mail: </strong>\n                                    <p>{selectedPatient.email}</p>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col span={8}>\n                                    <strong>Change status: </strong>\n                                    {\n                                        selectedPatient.status === 0 && <Button\n                                            onClick={() => changeStatus(selectedPatient)}>Patient Arrived</Button>\n                                    }\n                                    {\n                                        selectedPatient.status === 1 && <Button color=\"primary\"\n                                            onClick={() => changeStatus(selectedPatient)}>To Vaccination</Button>\n                                    }\n                                    {\n                                        selectedPatient.status > 1 && <Button color=\"cyan\"\n                                            onClick={() => changeStatus(selectedPatient)}>Finish Vaccination</Button>\n                                    }\n\n                                </Col>\n                            </Row>\n                        </>}\n                    <br/>\n                    <Table dataSource={patients} columns={columns} rowKey=\"insuranceNumber\" />\n                </>\n            }\n        </div>\n    );\n}\n\nexport default Vaccination;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport RegisterPatient from './components/RegisterPatient'\nimport Confirmation from './components/Confirmation'\nimport Vaccination from './components/Vaccination'\n\n// Pages\nconst MainRouter = () => {\n    return (\n        <Switch>\n            <Route exact path=\"/\">\n                <RegisterPatient />\n            </Route>\n            <Route exact path=\"/confirm\">\n                <Confirmation />\n            </Route>\n            <Route exact path=\"/vaccination\">\n                <Vaccination />\n            </Route>\n        </Switch>\n    );\n};\n\nexport default MainRouter;\n","import './App.css';\nimport 'antd/dist/antd.css';\nimport { withRouter } from \"react-router-dom\";\nimport { Layout } from 'antd';\nimport AppMenu from \"./components/AppMenu\";\nimport MainRouter from \"./router\";\n\nfunction App() {\n    const { Header, Content, Footer } = Layout;\n\n  return (\n    <div className=\"App\">\n        <Layout>\n            <Header className=\"app-header\">\n                <AppMenu />\n            </Header>\n            <Content className='app-content'>\n                <MainRouter />\n            </Content>\n            <Footer className=\"app-footer\">\n                Get Shot 2021\n            </Footer>\n        </Layout>\n    </div>\n  );\n}\n\nexport default  withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Router } from \"react-router-dom\";\nimport history from \"./utils/history\";\n\nrequire('dotenv').config()\n\nReactDOM.render(\n    <Router history={history}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}